{"ast":null,"code":"var _jsxFileName = \"/Users/gfadhlif/Web Dev/React/Advanced/react-side-effect-reducer-context-api/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  /*\n  1. The useEffect Hook allows you to perform side effects in your components.\n  2. Some examples of side effects are: fetching data, directly updating the DOM, and timers.\n  3. useEffect accepts two arguments. The second argument is optional.\n     useEffect(<function>, <dependency>)\n  */\n\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = (email, password) => {\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","logoutHandler","removeItem","loginHandler","email","password","setItem","children"],"sources":["/Users/gfadhlif/Web Dev/React/Advanced/react-side-effect-reducer-context-api/src/store/auth-context.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst AuthContext = React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n});\n\nexport const AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  /*\n  1. The useEffect Hook allows you to perform side effects in your components.\n  2. Some examples of side effects are: fetching data, directly updating the DOM, and timers.\n  3. useEffect accepts two arguments. The second argument is optional.\n     useEffect(<function>, <dependency>)\n  */\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  const loginHandler = (email, password) => {\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  return <AuthContext.Provider>{props.children}</AuthContext.Provider>;\n};\n\nexport default AuthContext;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACtCC,UAAU,EAAE,KAD0B;EAEtCC,QAAQ,EAAE,MAAM,CAAE;AAFoB,CAApB,CAApB;AAKA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAC5C,MAAM,CAACH,UAAD,EAAaI,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;EAEA;AACF;AACA;AACA;AACA;AACA;;EACEC,SAAS,CAAC,MAAM;IACd,MAAMQ,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;IACA,IAAIF,6BAA6B,KAAK,GAAtC,EAA2C;MACzCD,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CALQ,EAKN,EALM,CAAT;;EAOA,MAAMI,aAAa,GAAG,MAAM;IAC1BF,YAAY,CAACG,UAAb,CAAwB,YAAxB;IACAL,aAAa,CAAC,KAAD,CAAb;EACD,CAHD;;EAKA,MAAMM,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;IACxCN,YAAY,CAACO,OAAb,CAAqB,YAArB,EAAmC,GAAnC;IACAT,aAAa,CAAC,IAAD,CAAb;EACD,CAHD;;EAKA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAA,UAAuBD,KAAK,CAACW;EAA7B;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CA3BM;;GAAMZ,mB;;KAAAA,mB;AA6Bb,eAAeJ,WAAf"},"metadata":{},"sourceType":"module"}